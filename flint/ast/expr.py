# Auto generated by: tools/generate_ast.py
# Do not modify this file manually.

class Expr:
    def accept(self, visitor):
        raise NotImplementedError()

class ExprVisitor:
    def visit_assign(self, assign):
        raise NotImplementedError()

    def visit_binary(self, binary):
        raise NotImplementedError()

    def visit_grouping(self, grouping):
        raise NotImplementedError()

    def visit_call(self, call):
        raise NotImplementedError()

    def visit_literal(self, literal):
        raise NotImplementedError()

    def visit_logical(self, logical):
        raise NotImplementedError()

    def visit_unary(self, unary):
        raise NotImplementedError()

    def visit_variable(self, variable):
        raise NotImplementedError()

class Assign(Expr):
    def __init__(self, name, value):
        self.name = name
        self.value = value

    def accept(self, visitor):
        return visitor.visit_assign(self)

class Binary(Expr):
    def __init__(self, left, operator, right):
        self.left = left
        self.operator = operator
        self.right = right

    def accept(self, visitor):
        return visitor.visit_binary(self)

class Grouping(Expr):
    def __init__(self, expression):
        self.expression = expression

    def accept(self, visitor):
        return visitor.visit_grouping(self)

class Call(Expr):
    def __init__(self, callee, paren, arguments):
        self.callee = callee
        self.paren = paren
        self.arguments = arguments

    def accept(self, visitor):
        return visitor.visit_call(self)

class Literal(Expr):
    def __init__(self, value):
        self.value = value

    def accept(self, visitor):
        return visitor.visit_literal(self)

class Logical(Expr):
    def __init__(self, left, operator, right):
        self.left = left
        self.operator = operator
        self.right = right

    def accept(self, visitor):
        return visitor.visit_logical(self)

class Unary(Expr):
    def __init__(self, operator, right):
        self.operator = operator
        self.right = right

    def accept(self, visitor):
        return visitor.visit_unary(self)

class Variable(Expr):
    def __init__(self, name):
        self.name = name

    def accept(self, visitor):
        return visitor.visit_variable(self)

